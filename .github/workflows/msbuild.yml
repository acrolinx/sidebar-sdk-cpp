name: C++ SDK Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      reason:
        description: "Trigger Comment (Optional)"
        required: false
        default: "Manual Workflow Run"

env:
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release
  Solution_Name: Acrolinx.Sidebar.SDK.sln
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - name: mkdir download
      run: |
        mkdir download
        mkdir build_wrapper_output_directory 
    
    - name: download sonar
      run: |
        powershell Invoke-WebRequest -Uri "https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.10.0.19059/sonar-scanner-msbuild-4.10.0.19059-net46.zip" -OutFile ".\download\sonarmsbuild.zip"
        powershell Invoke-WebRequest -Uri "https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip" -OutFile ".\download\sonar-build-wrapper.zip"

    - name: extract sonar
      run: |
        powershell Expand-Archive .\download\sonarmsbuild.zip .\sonar-msbuild\
        powershell Expand-Archive .\download\sonar-build-wrapper.zip .\sonar-msbuild\
    
    - name: Set up JDK 11 - required by sonar
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    
    - name: Begin sonar
      run: sonar-msbuild\SonarScanner.MSBuild.exe begin /o:"acrolinx" /k:"acrolinx_sidebar-sdk-cpp" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cfamily.build-wrapper-output="build_wrapper_output_directory"

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1 
      env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    
    - name: Replace version info
      run: |
        $version = git describe --abbrev=0 --tags
        $version = $version.substring(1) + "." + $env:BUILD_NUMBER
        $commaSeperatedVersion = $version -replace '\.' , ','
        Write-Host $commaSeperatedVersion
        ((Get-Content -path .\Acrolinx.Sidebar.SDK\Resource.h -Raw) -replace '1\.0\.0\.99', $version) | Set-Content -Path .\Acrolinx.Sidebar.SDK\Resource.h
        ((Get-Content -path .\Acrolinx.Sidebar.SDK\Resource.h -Raw) -replace '1,0,0,99', $commaSeperatedVersion) | Set-Content -Path .\Acrolinx.Sidebar.SDK\Resource.h

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build x86 bit
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: sonar-msbuild\build-wrapper-win-x86\build-wrapper-win-x86-64.exe --out-dir build_wrapper_output_directory msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=Win32 ${{env.SOLUTION_FILE_PATH}} /t:Rebuild

     # SONAR is confused - End SONAR before building 64 bit.
    - name: End sonar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
      run: |
        if($SONAR_TOKEN) { Write-Host "Secret available" } else {  Write-Host "Secret Unavailable"}
        sonar-msbuild\SonarScanner.MSBuild.exe end
    
    - name: Register x86 SDK DLL
      run:  regsvr32 "Release\Acrolinx.Sidebar.SDK.dll"

    - name: Run Tests
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=Win32 ${{env.SOLUTION_FILE_PATH}} /t:Acrolinx.Sidebar.SDK.Test
        '& "$(vswhere -property installationPath)\Common7\IDE\MSTest.exe" /testcontainer:"Release\DefaultTest.dll" /resultsfile:"Release\testResult.xml"'

    - name: Build x64 bit
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Code signing
      env:
        CERTIFICATE: ${{ secrets.CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        BINARY32: "distrib/x86/Acrolinx.Sidebar.SDK.dll"
        BINARY64: "distrib/x64/Acrolinx.Sidebar.SDK.dll"
        SIGNTOOL: "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe"
      shell: powershell
      run : |
        $ErrorActionPreference = 'stop'
        $env:CERTIFICATE | Out-File -FilePath .\Certificate
        certutil -decode Certificate AcrolinxCertificate.pfx
        & $env:SIGNTOOL sign /f AcrolinxCertificate.pfx /p $env:CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 $env:BINARY32
        & $env:SIGNTOOL sign /f AcrolinxCertificate.pfx /p $env:CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 $env:BINARY64
        del .\Certificate
        del AcrolinxCertificate.pfx

    # Update .nuspec (Nuget Specification) with version number
    - name: Patch version in nuget spec
      run: |
        $version = git describe --abbrev=0 --tags
        $version = $version.substring(1) + "." + $env:BUILD_NUMBER
        ((Get-Content -path .\Acrolinx.Sidebar.SDK.nuspec -Raw) -replace '\$version\$', $version) | Set-Content -Path .\Acrolinx.Sidebar.SDK.nuspec
    
    # Creating nuget package
    - name: Create nuget package
      run: nuget pack Acrolinx.Sidebar.SDK.nuspec -NonInteractive

    # Change source of nuget package to Github, to publish on Github registry
    - name: Add nuget source to github (replacement for nexus)
      run: nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/acrolinx/index.json" -UserName ${{ github.actor }} -Password ${{ secrets.GITHUB_TOKEN }}

    # Push package to Github registry.
    - name: Push nuget package to github
      shell: powershell
      run: |
        $NugetPackage  = Get-ChildItem .\*.nupkg -Exclude *.symbols.nupkg -name
        Write-Host "Pushing to Github registry.. NuGet package name is : " $NugetPackage
        nuget push $NugetPackage -source "GitHub" -ApiKey  ${{ secrets.GITHUB_TOKEN }}
    
    # Push package to Nuget.org Only for tags(v*)
    - name: Push nuget package to Nuget.org
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        $NugetPackage = Get-ChildItem .\*.nupkg -Exclude *.symbols.nupkg -name
        Write-Host "Pushing to Nuget.org. NuGet package name is : " $NugetPackage
        nuget push $NugetPackage ${{ secrets.NUGET_API_KEY }} -Source nuget.org -Timeout 600

    # Create a release on GitHub. Only for tags(v*)
    - name: Create a release in Github
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          *.nupkg
          Acrolinx.Sidebar/bin/Release/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - uses: actions/upload-artifact@v3
      with:
        name: C++ Build Artifacts
        path: |
          .\Acrolinx.Sidebar.SDK.Setup\bin\Release\*
          .\Release\*
          .\x64\Release\*
          .\*.nupkg
          .\Acrolinx.Sidebar.SDK\Resource.h
